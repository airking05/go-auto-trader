// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/airking05/go-auto-trader/models"

// PositionRepository is an autogenerated mock type for the PositionRepository type
type PositionRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *PositionRepository) FindAll() ([]models.Position, error) {
	ret := _m.Called()

	var r0 []models.Position
	if rf, ok := ret.Get(0).(func() []models.Position); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNByTraderID provides a mock function with given fields: traderID
func (_m *PositionRepository) FindNByTraderID(traderID uint) ([]models.Position, error) {
	ret := _m.Called(traderID)

	var r0 []models.Position
	if rf, ok := ret.Get(0).(func(uint) []models.Position); ok {
		r0 = rf(traderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(traderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNUnclosedByTraderID provides a mock function with given fields: traderID
func (_m *PositionRepository) FindNUnclosedByTraderID(traderID uint) ([]models.Position, error) {
	ret := _m.Called(traderID)

	var r0 []models.Position
	if rf, ok := ret.Get(0).(func(uint) []models.Position); ok {
		r0 = rf(traderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(traderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: position, traderID
func (_m *PositionRepository) Insert(position *models.Position, traderID uint) (uint, error) {
	ret := _m.Called(position, traderID)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*models.Position, uint) uint); ok {
		r0 = rf(position, traderID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Position, uint) error); ok {
		r1 = rf(position, traderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Truncate provides a mock function with given fields:
func (_m *PositionRepository) Truncate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEntryOrder provides a mock function with given fields: positionID, orderID
func (_m *PositionRepository) UpdateEntryOrder(positionID uint, orderID uint) error {
	ret := _m.Called(positionID, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(positionID, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExitOrder provides a mock function with given fields: positionID, orderID
func (_m *PositionRepository) UpdateExitOrder(positionID uint, orderID uint) error {
	ret := _m.Called(positionID, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(positionID, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateToClosed provides a mock function with given fields: positionID
func (_m *PositionRepository) UpdateToClosed(positionID uint) error {
	ret := _m.Called(positionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(positionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateToMade provides a mock function with given fields: positionID
func (_m *PositionRepository) UpdateToMade(positionID uint) error {
	ret := _m.Called(positionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(positionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
