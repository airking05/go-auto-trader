// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/airking05/go-auto-trader/models"

// TraderRepository is an autogenerated mock type for the TraderRepository type
type TraderRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: traderConfigID
func (_m *TraderRepository) Find(traderConfigID uint) (models.TraderGorm, error) {
	ret := _m.Called(traderConfigID)

	var r0 models.TraderGorm
	if rf, ok := ret.Get(0).(func(uint) models.TraderGorm); ok {
		r0 = rf(traderConfigID)
	} else {
		r0 = ret.Get(0).(models.TraderGorm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(traderConfigID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *TraderRepository) FindAll() ([]models.TraderGorm, error) {
	ret := _m.Called()

	var r0 []models.TraderGorm
	if rf, ok := ret.Get(0).(func() []models.TraderGorm); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TraderGorm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByStatus provides a mock function with given fields: status
func (_m *TraderRepository) FindAllByStatus(status string) ([]models.TraderGorm, error) {
	ret := _m.Called(status)

	var r0 []models.TraderGorm
	if rf, ok := ret.Get(0).(func(string) []models.TraderGorm); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TraderGorm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNByStatus provides a mock function with given fields: status, limit, offset
func (_m *TraderRepository) FindNByStatus(status string, limit int, offset int) ([]models.TraderGorm, error) {
	ret := _m.Called(status, limit, offset)

	var r0 []models.TraderGorm
	if rf, ok := ret.Get(0).(func(string, int, int) []models.TraderGorm); ok {
		r0 = rf(status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TraderGorm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: traderConfig
func (_m *TraderRepository) Insert(traderConfig *models.TraderGorm) (uint, error) {
	ret := _m.Called(traderConfig)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*models.TraderGorm) uint); ok {
		r0 = rf(traderConfig)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.TraderGorm) error); ok {
		r1 = rf(traderConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Truncate provides a mock function with given fields:
func (_m *TraderRepository) Truncate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusByID provides a mock function with given fields: traderID, status
func (_m *TraderRepository) UpdateStatusByID(traderID uint, status string) error {
	ret := _m.Called(traderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(traderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
