// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/airking05/go-auto-trader/models"

import time "time"

// ChartRepository is an autogenerated mock type for the ChartRepository type
type ChartRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: chart
func (_m *ChartRepository) Create(chart *models.Chart) error {
	ret := _m.Called(chart)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Chart) error); ok {
		r0 = rf(chart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: exchangeId, duration, trading, settlement
func (_m *ChartRepository) Find(exchangeId models.ExchangeID, duration int, trading string, settlement string) (models.Chart, error) {
	ret := _m.Called(exchangeId, duration, trading, settlement)

	var r0 models.Chart
	if rf, ok := ret.Get(0).(func(models.ExchangeID, int, string, string) models.Chart); ok {
		r0 = rf(exchangeId, duration, trading, settlement)
	} else {
		r0 = ret.Get(0).(models.Chart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ExchangeID, int, string, string) error); ok {
		r1 = rf(exchangeId, duration, trading, settlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindN provides a mock function with given fields: exchangeId, duration, trading, settlement, num
func (_m *ChartRepository) FindN(exchangeId models.ExchangeID, duration int, trading string, settlement string, num int) ([]models.Chart, error) {
	ret := _m.Called(exchangeId, duration, trading, settlement, num)

	var r0 []models.Chart
	if rf, ok := ret.Get(0).(func(models.ExchangeID, int, string, string, int) []models.Chart); ok {
		r0 = rf(exchangeId, duration, trading, settlement, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ExchangeID, int, string, string, int) error); ok {
		r1 = rf(exchangeId, duration, trading, settlement, num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRange provides a mock function with given fields: exchangeId, duration, trading, settlement, start, end
func (_m *ChartRepository) FindRange(exchangeId models.ExchangeID, duration int, trading string, settlement string, start time.Time, end time.Time) ([]models.Chart, error) {
	ret := _m.Called(exchangeId, duration, trading, settlement, start, end)

	var r0 []models.Chart
	if rf, ok := ret.Get(0).(func(models.ExchangeID, int, string, string, time.Time, time.Time) []models.Chart); ok {
		r0 = rf(exchangeId, duration, trading, settlement, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ExchangeID, int, string, string, time.Time, time.Time) error); ok {
		r1 = rf(exchangeId, duration, trading, settlement, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Truncate provides a mock function with given fields:
func (_m *ChartRepository) Truncate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
