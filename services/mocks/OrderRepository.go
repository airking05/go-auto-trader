// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/airking05/go-auto-trader/models"

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: orderID
func (_m *OrderRepository) Find(orderID uint) (models.OrderGorm, error) {
	ret := _m.Called(orderID)

	var r0 models.OrderGorm
	if rf, ok := ret.Get(0).(func(uint) models.OrderGorm); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(models.OrderGorm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNByPositionID provides a mock function with given fields: positionID
func (_m *OrderRepository) FindNByPositionID(positionID uint) ([]models.OrderGorm, error) {
	ret := _m.Called(positionID)

	var r0 []models.OrderGorm
	if rf, ok := ret.Get(0).(func(uint) []models.OrderGorm); ok {
		r0 = rf(positionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrderGorm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(positionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: orderData
func (_m *OrderRepository) Insert(orderData *models.OrderGorm) (uint, error) {
	ret := _m.Called(orderData)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*models.OrderGorm) uint); ok {
		r0 = rf(orderData)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.OrderGorm) error); ok {
		r1 = rf(orderData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Truncate provides a mock function with given fields:
func (_m *OrderRepository) Truncate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
